#!/usr/bin/env python3
from pathlib import Path
import sys
import warnings
import argparse
from textwrap import dedent


def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument("image_name")

    args = argparser.parse_args()

    image_name = args.image_name

    # If .binder exists, stop
    if Path("./.binder").exists():
        print(dedent(
            """
            Found directory .binder
            This action assumes you are not explicitly using Binder to build your dependencies
            The presence of a directory named .binder indicates otherwise
            Aborting this step
            """
        ), file=sys.stderr)
        sys.exit(1)

    # Check for binder directory and attempt to validate user intent to use this to cache Binder builds
    p = Path("./binder")
    p.mkdir(exist_ok=True)

    if any(x for x in p.glob("*") if x.name != "Dockerfile"):
        print(dedent("""
            Files other than Dockerfile are present in your binder/ directory.
            This action assumes you are not explicitly using Binder to build your dependencies.
            The binder/ directory is used by this Action to point to an existing Docker image that Binder can pull.
            Aborting this step!
        """), file=sys.stderr)
        sys.exit(1)
    else:
        # DO NOT CHANGE THIS LINE! If you do, it will cause spurious warnings for everyone
        FIRST_LINE = "### DO NOT EDIT THIS FILE! This Is Automatically Generated And Will Be Overwritten ###"

        # Raise warning if file was edited
        dockerfile = p / "Dockerfile"
        if dockerfile.exists():
            contents = dockerfile.read_text().split("\n")
            if (len(contents) != 2) or (contents[0] != FIRST_LINE):
                warnings.warn(
                    "You have manually edited binder/Dockerfile. This file will be overwritten.",
                    UserWarning,
                )

        dockerfile.write_text(f"{FIRST_LINE}\nFROM {image_name}")


if __name__ == "__main__":
    main()
